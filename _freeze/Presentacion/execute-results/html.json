{
  "hash": "aef2c1ddead201f9c5e19eb16872e3db",
  "result": {
    "markdown": "---\nformat:\n  revealjs:\n    hash-type: number \n    slide-number: true\n    chalkboard: \n      buttons: true\n    preview-links: auto\n    logo: \"https://ig.conae.unc.edu.ar/wp-content/uploads/sites/68/2022/04/G-UNC-CONAE-C.png\"\n    theme: 'reveal.scss'\n\noutput-file: index.html\n---\n\n\n# {background-color=\"#1A428A\" background-image=\"https://ig.conae.unc.edu.ar/wp-content/uploads/sites/68/2022/04/G-UNC-CONAE-C.png\"  background-size=\"60% auto\" style=\"z-index: 4;\"}\n\n\n::: footer\n\n:::\n\n\n# git y GitHub { background-color=\"#1A428A\" background-image=\"img/presentation_title_edited.png\" background-size=\"auto 100%\" background-position=\"right\" style=\"height: 100%;  display: flex; align-items: center; justify-content: left; z-index: 4;\" } \n\n:::: {style=\"height: 100%; display: flex; align-items: center; justify-content: left;\"} \n\n::: {style=\"font-size: 1.3em; justify-content: 'center';\"}\nPablo Paccioretti\n\nVerónica Andreo\n:::\n::::\n \n\n::: footer\n \n:::\n\n## Prep steps\n\n- Tener `git` instalado en la PC \n- Crear una cuenta en [GitHub](https://github.com/)\n- Crear [token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-fine-grained-personal-access-token) en GitHub\n- _Opcional_: Instalar Quarto ([https://quarto.org/docs/download/](https://quarto.org/docs/download/))\n\n::: {.callout-note appearance=\"simple\"}\n\nPor defecto `git` está instalado en la mayoría de las PCs que tienen Mac o Linux. En Windows se puede instalar desde [aquí](https://gitforwindows.org/)\n\nQuarto puede usarse con: VSCode, RStudio, Jupyter, Neovim, otros editores de texto\n:::\n\n## Outline\n\n:::: {.columns style=\"font-size: 0.92em;\"}\n\n::: {.column width=\"48%\"}\n- Qué es `git` \n- `git` workflow local\n  * Iniciar un repositorio (*repo*)\n  * Agregar/editar archivos y registrar cambios, _commit_ \n  * Ramas / _Branches_ \n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"48%\"}\n- Qué es [GitHub](https://github.com/)\n- GitHub Workflow: \n  - __Proyecto personal__\n    * Crear repo\n    * Push / Pull\n  - __Proyecto colaborativo__\n    * Fork / Clone\n    * Pull request\n:::\n\n::::\n\n\n---\n\n![](img/local_and_remote_workflow.png){.r-stretch fig-align=\"center\"} \n\n\n# {background-color=\"#fefefe\" background-image=\"https://git-scm.com/images/logos/downloads/Git-Logo-2Color.svg\"  background-size=\"60% auto\" style=\"z-index: 4;\"}\n\n\n\n## Qué es `git`?\n\n Es un programa de control de versiones por línea de comandos que permite:\n\n - Administrar archivos, carpetas\n - Realizar un seguimiento de los cambios a lo largo del tiempo\n - Volver a versiones anteriores\n\n## ¿Qué es un repositorio?\n\n- repo = repositorio = _repository_\n- Es básicamente un directorio\n- Por lo general es utilizado para organizar un *único* proyecto\n- Los repos pueden contener otros directorios, archivos, imágenes, videos...\n\n\n## `git` Workflow local\n\n:::: {.columns style=\"font-size: 0.92em;\"}\n\n::: {.column width=\"80%\"}\n\n(@) Iniciar un repositorio en una carpeta\n\n```{{bash}}\ngit init\n```\n\n(@) Agregar/editar archivos\n(@) Registrar cada cambio\n\n```{{bash}}\ngit add .\n```\n(@) Registrar el cambio en el repositorio (commit)\n\n```{{bash}}\ngit commit -m \"Un mensaje descriptivo y corto\"\n```\n:::\n\n::: {.column width=\"20%\"}\n\n\n```{mermaid}\n%%|fig-height: 5\n\ngraph TD\n  A[Working] -->|add| B(Staging)\n  B --> |commit| C(Repository)\n```\n\n\n:::\n\n::::\n\n\n## Tips sobre `git`\n\n::: {.callout-tip appearance=\"simple\"}\nPara utilizar `git` no es necesario internet. Es posible trabajar de manera local para llevar un control de versiones.\n:::\n\n::: {.callout-important}\n## Cuándo se debería usar git? \n\nPrincipalmente para trabajar/editar archivos de texto plano, por ejemplo: `.py`, `.sh`, `.md`, `.qmd`, `.r`, etc.\nNo se recomienda para imágenes, películas, música o archivos como pdf, docx, etc.\n:::\n\n::: {.callout-tip}\n## Cómo deberían ser los mensajes de cada _commit_\n\nMediante una oración corta e informativa ($\\le 72$ caracteres), se debería describir y resumir los cambios que se realizaron.\n:::\n\n\n## Revisando los cambios\n\n- Cómo ver lo que se estuvo modificando? \n\n```{{bash}}\ngit log\n```\n- Cómo ver qué archivos se han modificado? \n\n```{{bash}}\ngit status\n```\n\n- Cómo ver qué se cambió de cada archivo? \n\n```{{bash}}\ngit diff\ngit diff nombreArchivo.txt\n```\n\n## Otros comandos útiles\n\n::::: {.columns}\n\n:::: {.column width=\"40%\"}\nEliminar archivos del repo\n\n```{{bash}}\ngit rm nombreArchivo.py\n```\n::::\n::: {.column width=\"10%\"}\n:::\n:::: {.column width=\"50%\"}\n::: {.callout-important}\n## Cuidado! \n\nEsto también elimina el archivo del repositorio. \n:::\n::::\n:::::\n\n<br>\nRenombrar/mover archivos\n\n```{{bash}}\ngit mv nombreArchivo.py OtroNombre.py\n```\n\n\n## Trabajando con *branches*\n\n- Las ramas o *branches* permiten probar nuevos cambios (*feature branch*)\n- Si un cambio no funcionó, se puede eliminar la rama sin necesidad de deshacer cambios en la rama principal (*main*)\n- Si un cambio funcionó, se puede combinar (*merge*) a la rama principal\n- Siempre se utiliza el mismo directorio de trabajo\n\n--- \n\n- En qué rama estoy?\n```{{bash}}\ngit branch\n```\n\n- Cómo creo una rama?\n```{{bash}}\ngit branch nueva_rama\n```\n\n- Cómo cambio entre ramas?\n```{{bash}}\ngit checkout nueva_rama\n```\n\n- Cómo creo y cambio a la nueva rama?\n```{{bash}}\ngit checkout -b nueva_rama\n```\n\n- Como veo las diferencias entre ramas?\n```{{bash}}\ngit diff una_rama..otra_rama\n```\n\n---\n\n::: {layout-valign=\"middle\"}\n::: {.callout-tip}\n## Algunos tips para trabajar con ramas\n\n- Se puede cambiar entre ramas y realizar *commits* en cada una de ellas. \n\n- Cada rama está separada y es independiente de las otras ramas, pero contiene todo lo que tenía la rama principal al momento del _branching_. \n\n- Antes de cambiar entre ramas, el directorio de trabajo debería estar sin conflictos ni cambios no registrados (_commiteados_).\n:::\n:::\n\n## Cómo combinar ramas? \n\nSupongamos que agregamos algo nuevo en una *feature_branch* y lo queremos incorporar a la rama principal *main*. Cambiamos a main y desde allí traemos los cambios realizados en *feature_branch*:\n\n```{{bash}}\ngit checkout main\ngit merge feature_branch\n```\n\n![](https://images.prismic.io/launchdarkly/abb1e704-200d-491e-8410-22d9e024b669_image1.png?ixlib=gatsbyFP&auto=compress%2Cformat&fit=max&rect=0%2C0%2C624%2C231&w=1400&h=518){fig-align=\"center\"}\n\n\n## Conflictos cuando se combinan cambios/ramas\n\n- Se dan cuando dos _commits_ tienen modificaciones sobre la misma línea de código.\n- `git` identificará los conflictos pero no los solucionará; queda a criterio del usuario.\n\nAlternativas:\n\n- Abortar el merge `git merge --abort`\n- Arreglar manualmente los conflictos\n\n---\n\n## Como evitar conflictos\n\n- Registrar los cambios en la rama de trabajo de manera frecuente.\n- Mantener cada commit simple y enfocado a determinados cambios/soluciones.\n- Combinar los cambios en la rama de trabajo (*feature_branch* o *bug_fixing_branch*) con la rama principal de manera frecuente.\n\n<!-- ---\n\n```{{bash}}\ngit log  --graph --oneline --all --decorate\n``` -->\n\n\n## Volviendo en el tiempo\n\nPodemos ver los cambios que se estuvieron realizando y volver a versiones anteriores que ya fueron registradas (_`commiteadas`_).\n\n```{{bash}}\ngit checkout archivo\ngit checkout branch\ngit checkout commitID\n```\n\n<br>\n\n::::{.columns}\n\n:::{.column style=\"font-size: 0.8em;\"}\n\nDeshacer cambios hechos *antes* de hacer el commit. \n\n```{{bash}}\ngit reset HEAD nombreArchivo.r\n```\n:::{style=\"color: grey; text-align: center; font-size: 0.8em;\"}\nStaging area\n:::\n\n:::\n\n:::{.column style=\"font-size: 0.8em;\"}\nDeshacer cambios hechos *luego* de hacer el commit. \n```{{bash}}\ngit commit --ammend -m \"bla bla\"\n```\n:::{style=\"color: grey; text-align: center; font-size: 0.8em;\"}\nRepository\n:::\n\n:::\n\n::::\n\n\n# {background-image=\"https://miro.medium.com/max/1200/1*dDNpLKu_oTLzStsDTnkJ-g.png\" background-color=\"#fefefe\" background-size=\"60% auto\" style=\"z-index: 4;\"}\n\n\n## Qué es GitHub? \n\n- Es una plataforma que contiene repositorios almacenados en la nube, diferentes desarrolladores pueden contribuir a un único proyecto y ver los cambios realizados por otras personas. \n- GitHub ayuda a colaborar entre usuarios usando `git`. \n\n---\n\n::::{.columns}\n\n:::{.column}\n##### `git`\n- git es un software para control de versiones. Permite llevar un registro de los cambios realizados en un proyecto.\n:::\n\n:::{.column}\n##### GitHub\n- GitHub es una plataforma web que incorpora características de git para que puedan ser usadas de manera colaborativa.\n:::\n\n::::\n\n---\n\n![](img/local_and_remote_workflow.png){.r-stretch fig-align=\"center\"} \n\n## GitHub workflow\n\nPrincipales acciones en GitHub\n\n::: {style=\"font-size: calc(0.58em + 0.5vmin);\"}\n\nFork\n: El proceso de copiar el repositorio remoto de otro desarrollador en nuestro GitHub\n\nClone\n: Crea una copia local del repositorio y sincroniza entre las dos ubicaciones\n\nPull \n: Descarga contenido desde un repositorio remoto y actualiza el repositorio local \n\nPull request\n: Una vez que se realizan cambios, se pueden sugerir mediante _pull request_\n\nMerge\n: La persona dueña del repositorio puede combinar los cambios sugeridos\n\n:::\n\n\n# Workflows en GitHub {background-color=\"#1A428A\"}\n\n::: {style=\"font-size: 2.2em; color: #e81f76\"}\n Proyecto propio \n:::\n\n---\n\n\na. Crear un repo remoto y luego clonarlo\n\n![](img/Creacion_Repo_GitHub.png){.r-stretch fig-align=\"center\"}\n\n---\n\nb. Crear un repo local y agregar el remoto\n\n```{{bash}}\necho \"# Taller_IG_Git_GitHub\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git\ngit push -u origin main\n```\n\n<hr>\n\nb. Si el repo local existe, agregar el remoto\n\n```{{bash}}\ngit branch -M main\ngit remote add origin https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git\ngit push -u origin main\n```\n\n---\n\n![](img/Importar_Repo_GitHub.png){.r-stretch fig-align=\"center\"}\n\n---\n\n![](img/Importado_Repo_GitHub.png){.r-stretch fig-align=\"center\"}\n\n---\n\n## Trabajo en repo propio\n\nHacer modificaciones locales y subirlas al repo remoto (*pushear*) \n```{{bash}}\ngit add path/to/fileschanged\ngit commit -m \"add new version of file x\"\ngit push\n```\n\nBajar cambios remotos/actualizar repo local\n```{{bash}}\ngit pull\n```\n\n# Workflows en GitHub {background-color=\"#1A428A\"}\n\n::: {style=\"font-size: 2.2em; color: #e81f76\"}\n Proyecto colaborativo\n:::\n\n---\n\n{{< fa code-fork >}}  *Fork-ear* el repo remoto al que queremos contribuir \n\n\n\n::: {.r-stack}\n\n![](img/fork_1.png){.fragment}\n\n![](img/create_fork.png){.fragment .fade-in-then-out}\n\n![](img/fork_created.png){.fragment .fade-in-then-out}\n:::\n\n---\n\nClonar el fork y descargarlo\n\n\n::: {layout=\"[[-20, 60, -20], [-10, 80, -10]]\"}\n\n![](img/clone_fork_https.png)\n\n![](img/git_clone_repo_terminal.png)\n\n:::\n\n\n---\n\nDecirle quien es el repo remoto madre (_`upstream`_)\n\n![](img/add_upstream.png){.r-stretch fig-align=\"center\"}\n\n---\n\n### Qué estuvimos haciendo?\n\n![](https://learning.nceas.ucsb.edu/2020-02-RRCourse/images/github-workflows-fork.png){.r-stretch fig-align=\"center\"}\n\n---\n\nCómo contribuimos al repo de alguien más?\n\n1. En nuestra copia local, creamos una nueva rama (*feature branch*)\n2. Hacemos modificaciones, las agregamos `add` al area de staging y las registramos `commit`(todo esto es *local*)\n3. Subir los cambios a nuestra copia remota o *fork* (*origin*)\n4. Desde nuestro *fork*, sugerimos el cambio al repo original (*upstream*) via un *pull request*\n\n---\n\nEn commandos...\n\n```{{bash}}\ngit checkout -b new-feature\ngit status\ngit add file_modified1 file_modified2 new_file\ngit commit -m \"add new feature\"\ngit push origin new-feature\n```\nEjemplo: \n\n![](img/link_to_PR.png)\n\n---\n\nCreamos el *pull request*\n\n![](img/merge_pull_request.png){.r-stretch fig-align=\"center\"}\n\n---\n\nUna vez creado el PR, se pueden seguir haciendo commits desde la \n*feature branch* al PR\n\n\n::: {.r-stack}\n\n![](img/commits_to_pr.png){width=70% fig-align=\"center\" .fragment .fade-in-then-out}\n\n![](img/commits_to_pr_github.png){width=90% fig-align=\"center\" .fragment .fade-in-then-out}\n\n:::\n\n\n---\n\nMerged pull request\n\n![](img/merged_pr.png){.r-stretch fig-align=\"center\"}\n\n\n## Manos a la obra\n\n::: {.callout-note icon=false}\n## Ejercitación\n1. Crea tu repo en GitHub, clonalo localmente y pushea alguna modificación\n2. Forkea el repo de esta presentación, clonalo y hacé un pull request\n:::\n\n# Muchas gracias! {background-color=\"#1A428A\"}\n\n:::: {style=\"font-size: 0.6em;\"}\n\n[veroandreo\\@gmail.com](mailto:veroandreo@gmail.com)\n\n[pablopaccioretti\\@agro.unc.edu.ar](mailto:pablopaccioretti@agro.unc.edu.ar)\n\n::::\n<!-- ## Material de consulta\n\nhttps://kinsta.com/knowledgebase/git-vs-github/\n\nhttps://www.slideshare.net/bcbbslides/introduction-to-git-and-github-72514916 -->\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n2+3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::",
    "supporting": [
      "Presentacion_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}