---
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    preview-links: auto
    logo: "https://ig.conae.unc.edu.ar/wp-content/uploads/sites/68/2022/04/G-UNC-CONAE-C.png"
    theme: 'reveal.scss'

output-file: index.html
---

# {background-color="#1A428A" background-image="https://ig.conae.unc.edu.ar/wp-content/uploads/sites/68/2022/04/G-UNC-CONAE-C.png"  background-size="60% auto" style="z-index: 4;"}


::: footer

:::


# git y GitHub { background-color="#1A428A" background-image="img/presentation_title_edited.png" background-size="auto 100%" background-position="right" style="height: 100%;  display: flex; align-items: center; justify-content: left; z-index: 4;" } 

:::: {style="height: 100%; display: flex; align-items: center; justify-content: left;"} 

::: {style="font-size: 1.3em; justify-content: 'center';"}
Pablo Paccioretti

Verónica Andreo
:::
::::
 

::: footer
 
:::

## Prep steps

- Tener `git` instalado en la PC 
- Crear una cuenta en [GitHub](https://github.com/)
- Instalar Quarto ([https://quarto.org/docs/download/](https://quarto.org/docs/download/))

::: {.callout-note appearance="simple"}

Por defecto `git` está instalado en la mayoría de las PCs que tienen Mac o Linux. En Windows se puede instalar desde [aquí](https://gitforwindows.org/)

Quarto puede usarse con: VS Code, RStudio, Jupyter, Neovim, otros editores de texto
:::

## Outline

:::: {.columns style="font-size: 0.92em;"}

::: {.column width="47%"}
- Qué es `git` 
- `git` workflow local
  * Iniciar un repositorio (*repo*)
  * Agregar/editar archivos y registrar cambios, _commit_ 
:::

::: {.column width="4%"}
:::

::: {.column width="47%"}
- Qué es [GitHub](https://github.com/)
- GitHub Workflow: __Proyecto personal__
  * Crear repo
  * Push / Pull
- GitHub Workflow: __Proyecto colaborativo__
  * Fork / Clone
  * Pull request
:::

::::

# ![](https://git-scm.com/images/logos/downloads/Git-Logo-2Color.svg){width="600px"}


## Qué es `git`?

- Es un programa de control de versiones por línea de comandos que permite:
  - Administrar archivos, carpetas
  - Realizar un seguimiento de los cambios a lo largo del tiempo
  - Volver a versiones anteriores

## ¿Qué es un repositorio?

- repo = repositorio = _repository_
- Es básicamente un directorio
- Por lo general es utilizado para organizar un *único* proyecto
- Los repos pueden contener otros directorios, archivos, imágenes, videos...


## `git` Workflow local

:::: {.columns style="font-size: 0.92em;"}

::: {.column width="80%"}

(@) Iniciar un repositorio en una carpeta

```{{bash}}
git init
```

(@) Agregar/editar archivos
(@) Registrar cada cambio

```{{bash}}
git add .
```
(@) Registrar el cambio en el repositorio (commit)

```{{bash}}
git commit -m "Un mensaje descriptivo y corto"
```
:::

::: {.column width="20%"}

```{mermaid}
%%|fig-height: 5

graph TD
  A[Working] -->|add| B(Staging)
  B --> |commit| C(Repository)
```

:::

::::


## Tips sobre `git`

::: {.callout-tip appearance="simple"}
Para utilizar `git` no es necesario internet. Es posible trabajar sólo  localmente para llevar un control de versiones.
:::

::: {.callout-important}
## Cuándo se debería usar git? 

Principalmente para trabajar/editar archivos de texto plano, por ejemplo: `.py`, `.sh`, `.md`, `.qmd`, `.r`, etc.
No se recomienda para imágenes, películas, música o archivos como pdf, docx, etc.
:::

::: {.callout-tip}
## Cómo deberían ser los mensajes de cada _commit_

Mediante una oración corta e informativa ($\le 72$ caracteres), se debería describir y resumir los cambios que se realizaron.
:::


## Revisando los cambios

- Cómo ver lo que se estuvo modificando? 

```{{bash}}
git log
```
- Cómo ver qué archivos se han modificado? 

```{{bash}}
git status
```

- Cómo ver qué cambió de cada archivo? 

```{{bash}}
git diff
git diff nombreArchivo.txt
```

## Otros comandos útiles

::::: {.columns}

:::: {.column width="40%"}
Eliminar archivos del repo

```{{bash}}
git rm nombreArchivo.py
```
::::
::: {.column width="10%"}
:::
:::: {.column width="50%"}
::: {.callout-important}
## Cuidado! 

Esto también elimina el archivo del repositorio. 
:::
::::
:::::

<br>
Renombrar/mover archivos

```{{bash}}
git mv nombreArchivo.py OtroNombre.py
```


## Trabajando con *branches*

- Las ramas o *branches* permiten probar nuevos cambios (*feature branch*)
- Si un cambio no funcionó, se puede eliminar la rama sin necesidad de deshacer cambios en la rama principal (*main*)
- Si un cambio funcionó, se puede combinar (*merge*) a la rama principal
- Siempre se utiliza el mismo directorio de trabajo

--- 

- En qué rama estoy?
```{{bash}}
git branch
```

- Cómo creo una rama?
```{{bash}}
git branch nueva_rama
```

- Cómo cambio entre ramas?
```{{bash}}
git checkout nueva_rama
```

- Cómo creo y cambio a la nueva rama?
```{{bash}}
git checkout -b nueva_rama
```

- Como veo las diferencias entre ramas?
```{{bash}}
git diff una_rama..otra_rama
```

---

::: {layout-valign="middle"}
::: {.callout-tip}
## Algunos tips para trabajar con ramas

- Se puede cambiar entre ramas y realizar *commits* en cada una de ellas. 

- Cada rama está separada y es independiente de las otras ramas, pero contiene todo lo que tenía la rama principal al momento del _branching_. 

- Antes de cambiar entre ramas, el directorio de trabajo debería estar sin conflictos ni cambios no registrados (_commiteados_).
:::
:::

## Cómo combinar ramas? 

Supongamos que agregamos algo nuevo en una *feature_branch* y lo queremos incorporar a la rama principal *main*. Cambiamos a main y desde allí traemos los cambios realizados en *feature_branch*:

```{{bash}}
git checkout main
git merge feature_branch
```

![](https://images.prismic.io/launchdarkly/abb1e704-200d-491e-8410-22d9e024b669_image1.png?ixlib=gatsbyFP&auto=compress%2Cformat&fit=max&rect=0%2C0%2C624%2C231&w=1400&h=518){fig-align="center"}


## Conflictos cuando se combinan cambios/ramas

- Se dan cuando dos _commits_ tienen modificaciones sobre la misma línea de código.
- `git` identificará los conflictos pero no los solucionará; queda a criterio del usuario.

Alternativas:

- Abortar el merge `git merge --abort`
- Arreglar manualmente los conflictos

---

## Como evitar conflictos

- Registrar los cambios en la rama de trabajo de manera frecuente
- Mantener cada commit simple y enfocado a determinados cambios/soluciones
- Combinar los cambios en la rama de trabajo (*feature_branch* o *bug_fixing_branch*) con la rama principal de manera frecuente. 

---

```{{bash}}
git log  --graph --oneline --all --decorate
```


## Volviendo en el tiempo

Podemos ver los cambios que se estuvieron realizando y volver a versiones anteriores que ya fueron registradas (`_commiteadas_`)

```{{bash}}
git checkout archivo
git checkout branch
git checkout commitID
```

<br>

::::{.columns}

:::{.column style="font-size: 0.8em;"}

Deshacer cambios hechos *antes* de hacer el commit. 

```{{bash}}
git reset HEAD nombreArchivo.r
```
:::{style="color: grey; text-align: center; font-size: 0.8em;"}
Staging area
:::

:::

:::{.column style="font-size: 0.8em;"}
Deshacer cambios hechos *luego* de hacer el commit. 
```{{bash}}
git commit --ammend -m "bla bla"
```
:::{style="color: grey; text-align: center; font-size: 0.8em;"}
Repository
:::

:::

::::

# ![](https://miro.medium.com/max/1400/0*ZLfPdBuEy3SgJscw.jpg)


## Qué es GitHub? 

- Es una plataforma que contiene repositorios almacenados en la nube, diferentes desarrolladores pueden contribuir a un único proyecto y ver los cambios realizados por otras personas. 
- GitHub ayuda a colaborar entre usuarios usando git. 

---

![](img/local_and_remote_workflow.png){.r-stretch fig-align="center"} 

---

::::{.columns}

:::{.column}
##### `git`
- git es un software para control de versiones. Permite llevar un registro de los cambios realizados en un proyecto.
:::

:::{.column}
##### GitHub
- GitHub es una plataforma web que incorpora características de git para que puedan ser usadas de manera colaborativa.
:::

::::

---

### Principales acciones en GitHub


::: {style="font-size: calc(0.61em + 0.5vmin);"}
Fork
: El proceso de copiar el repositorio remoto de otro desarrollador en nuestro GitHub

Clone
: Crea una copia local del repositorio y sincroniza entre las dos ubicaciones

Pull 
: Descarga contenido desde un repositorio remoto y actualiza el repositorio local 

Pull request
: Una vez que se realizan cambios, se pueden sugerir mediante _pull request_

Merge
: La persona dueña del repositorio puede combinar los cambios sugeridos

:::


# Workflows en GitHub {background-color="#1A428A"}


---

## Proyecto propio

---

a. Crear un repo remoto y luego clonarlo

![](img/Creacion_Repo_GitHub.png){.r-stretch fig-align="center"}

---

b. Crear un repo local y agregar el remoto

```{{bash}}
echo "# Taller_IG_Git_GitHub" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git
git push -u origin main
```

---

![](img/Importar_Repo_GitHub.png){.r-stretch fig-align="center"}

---

![](img/Importado_Repo_GitHub.png){.r-stretch fig-align="center"}

---

## Trabajo en repo propio

Hacer modificaciones locales y subirlas al repo remoto (*pushear*) 
```{{bash}}
git add path/to/fileschanged
git commit -m "add new version of file x"
git push
```

Bajar cambios remotos/actualizar repo local
```{{bash}}
git pull
```

---

## Proyecto colaborativo

---

*Fork-ear* el repo remoto al que queremos contribuir

![](img/fork_1.png){width="50%"}

---

*Fork-ear* el repo remoto al que queremos contribuir

![](img/create_fork.png)

---

Fork (copia del repo original) en nuestro GitHub (remoto)

![](img/fork_created.png)

---

Clonar el fork - online

![](img/clone_fork_https.png)

---

Clonar el fork - bajarlo a nuestra PC

![](img/git_clone_repo_terminal.png)

---

Decirle quien es el repo remoto madre

![](img/add_upstream.png){.r-stretch fig-align="center"}

---

### Qué estuvimos haciendo?

![](https://learning.nceas.ucsb.edu/2020-02-RRCourse/images/github-workflows-fork.png){.r-stretch fig-align="center"}

---

Y cómo contribuimos modificaciones al repo de alguien más?

1. En nuestra copia local, creamos una nueva rama (*feature branch*)
2. Hacemos modificaciones, las agregamos al area de staging y las registramos (todo esto es *local*)
3. Necesitamos subir nuestros cambios a nuestra copia remota (*origin*)
4. Desde nuestro fork, sugerimos el cambio al repo original (*upstream*) via un *pull request*

---

En commandos...
```{{bash}}
git checkout -b new-feature
git status
git add file_modified1 file_modified2 new_file
git commit -m "add new feature"
git push origin new-feature
```

Click en el link... y...

---

Pull request

![](img/merge_pull_request.png){.r-stretch fig-align="center"}

---

Merged pull request

![](img/merged_pr.png){.r-stretch fig-align="center"}

---

## Codigos ejecutados


```{{bash}}
py -m pip install jupyter #sudo

git init .
curl -o .gitignore --fail --show-error --silent --location https://raw.github.com/github/gitignore/master/R.gitignore
# curl -o .gitignore --fail --show-error --silent --location https://raw.github.com/github/gitignore/master/Python.gitignore
```


## Trabajo colaborativo 

- Clonar proyecto forkeado

```{{bash}}
git clone https://github.com/veroandreo/Taller_IG_Git_GitHub.git
cd Taller_IG_Git_GitHub
```

- Agregar un repositorio remoto al proyecto

```{{bash}}
git remote add upstream https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git
git remote -v
```

```
origin  https://github.com/veroandreo/Taller_IG_Git_GitHub.git (fetch)
origin  https://github.com/veroandreo/Taller_IG_Git_GitHub.git (push)
upstream  https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git (fetch)
upstream  https://github.com/PPaccioretti/Taller_IG_Git_GitHub.git (push)
```

## Descargando cambios

```{.bash}
$ git pull
```

```{.bash}
remote: Enumerating objects: 11, done.
remote: Counting objects: 100% (11/11), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 5 (delta 3), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (5/5), 1.41 KiB | 62.00 KiB/s, done.
From https://github.com/PPaccioretti/Taller_IG_Git_GitHub
   29e253f..23b8f56  main       -> origin/main
Updating 29e253f..23b8f56
Fast-forward
 .github/workflows/publish.yml | 25 +++++++++++++++++++++++++
 Presentacion.qmd              | 41 -----------------------------------------
 _quarto.yml                   |  4 ++++
 3 files changed, 29 insertions(+), 41 deletions(-)
 create mode 100644 .github/workflows/publish.yml
```

## Descargando cambios - error

```{.bash}
$ git pull
```

```{.bash code-line-numbers="8-12"}
remote: Enumerating objects: 10, done.
remote: Counting objects: 100% (10/10), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 6 (delta 3), reused 5 (delta 3), pack-reused 0
Unpacking objects: 100% (6/6), 1.18 KiB | 37.00 KiB/s, done.
From https://github.com/PPaccioretti/Taller_IG_Git_GitHub
   93c8128..845dc10  main       -> origin/main
error: Your local changes to the following files would be overwritten by merge:
        .gitignore
        Presentacion.qmd
Please commit your changes or stash them before you merge.
Aborting
Updating 93c8128..845dc10
```


<!-- ## Material de consulta

https://kinsta.com/knowledgebase/git-vs-github/

https://www.slideshare.net/bcbbslides/introduction-to-git-and-github-72514916 -->
